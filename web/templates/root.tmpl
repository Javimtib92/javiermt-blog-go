<!DOCTYPE html>
<html
  lang="en"
  class="{{.theme}}"
  x-data="theme"
  x-bind:class="{ 'dark': theme === 'dark' }"
  x-init="init"
>
  {{ template "head" . }}
  <body
    class="bg-white text-black antialiased transition-colors dark:bg-background-700 dark:text-white"
  >
    <div class="mb-40 max-w-3xl md:mx-auto">
      <main class="flex min-w-0 flex-auto flex-col px-2 md:px-0">
        {{template "nav" .}}

        <div id="page" hx-swap-oob="true">
          {{ .template }}
        </div>
      </main>
    </div>
    <!-- Common footer content goes here -->

    {{if .liveReloadEnabled }}
    {{template "livereload"}}
    {{ end }}
    <script>
      document.addEventListener("htmx:beforeSwap", function (event) {
        if (event.detail.target.id === "page") {
          // Create a temporary element to hold the parsed HTML
          const tempElement = document.createElement("html");
          tempElement.innerHTML = event.detail.xhr.responseText;

          // Get the head content from the temporary element
          const metaTags = tempElement.querySelectorAll("meta");

          // Remove existing meta tags from the current document's head
          document.querySelectorAll("meta").forEach((tag) => tag.remove());

          // Append the new meta tags to the current document's head
          metaTags.forEach((metaTag) => {
            document.querySelector("head").appendChild(metaTag.cloneNode(true));
          });
        }
      });
    </script>

    <script>
      function getCookie(name) {
        const value = "; " + document.cookie;
        const parts = value.split("; " + name + "=");
        if (parts.length === 2) return parts.pop().split(";").shift();
      }

      function getPreferredTheme() {
        return getCookie("theme") || (darkQuery.matches ? "dark" : "light");
      }

      document.addEventListener("alpine:init", () => {
        Alpine.data("theme", () => {
          const darkQuery = window.matchMedia("(prefers-color-scheme: dark)");

          return {
            theme: darkQuery.matches ? "dark" : "light",
            toggleTheme() {
              this.theme = this.theme === "light" ? "dark" : "light";
              this.savePreferredTheme();
            },
            savePreferredTheme() {
              document.cookie =
                "theme=" +
                this.theme +
                "; expires=Fri, 31 Dec 9999 23:59:59 GMT; path=/; SameSite=Strict";
            },
            init() {
              // Initialize the theme based on the preferred theme or default to 'light'
              this.theme = getPreferredTheme();
            },
          };
        });
      });
    </script>
    <script>
      if (!CSS.supports("animation-timeline: view()")) {
        const markElements = document.querySelectorAll("mark");

        for (const mark of markElements) {
          const OPTS = {
            threshold: 1.0,
          };
          const HANDLE = (entries) => {
            entries.forEach((entry) => {
              entry.target.style.setProperty(
                "--highlighted",
                entry.isIntersecting ? 1 : 0
              );
            });
          };
          const OBSERVER = new IntersectionObserver(HANDLE, OPTS);

          OBSERVER.observe(mark);

          observerAdded.current = true;
        }
      }
    </script>
  </body>
</html>
